name: Test setup
description: Setup the test environment

runs:
  using: "composite"
  steps:
    - name: Set up Elixir
      id: elixir-install
      uses: erlef/setup-beam@3ba5b86a2a6916f8cb0e64dcca30a56732a34bdf
      with:
        version-file: .tool-versions
        version-type: strict

    - name: Restore dependencies & _build cache
      id: build_cache
      uses: actions/cache/restore@v3
      with:
        key: |
          build-${{ runner.os }}-${{ steps.elixir-install.outputs.otp-version }}-${{ steps.elixir-install.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          build-${{ runner.os }}-${{ steps.elixir-install.outputs.otp-version }}-${{ steps.elixir-install.outputs.elixir-version }}
        path: |
          deps
          _build

    - name: Install dependencies
      if: steps.build_cache.outputs.cache-hit != 'true'
      shell: bash
      run: mix deps.get --check-locked

    - name: Compile dependencies
      if: steps.build_cache.outputs.cache-hit != 'true'
      shell: bash
      run: mix deps.compile

    - name: Save dependencies & _build cache
      id: build_cache_save
      uses: actions/cache/save@v3
      if: steps.build_cache.outputs.cache-hit != 'true'
      with:
        key: |
          build-${{ runner.os }}-${{ steps.elixir-install.outputs.otp-version }}-${{ steps.elixir-install.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
        path: |
          deps
          _build

    # Taken from dialyxir's documentation
    # https://github.com/jeremyjh/dialyxir/blob/0091928de1ec01e30f82c50856f2dfe0a8f918ce/docs/github_actions.md
    - name: Restore PLT cache
      id: plt_cache
      uses: actions/cache/restore@v3
      with:
        key: |
          plt-${{ runner.os }}-${{ steps.elixir-install.outputs.otp-version }}-${{ steps.elixir-install.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          plt-${{ runner.os }}-${{ steps.elixir-install.outputs.otp-version }}-${{ steps.elixir-install.outputs.elixir-version }}-
        path: |
          priv/plts

    # Create dialyzer's PLTs if no cache was found
    - name: Create PLTs
      if: steps.plt_cache.outputs.cache-hit != 'true'
      shell: bash
      run: mix dialyzer --plt

    # By default, the GitHub Cache action will only save the cache if all steps in the job succeed,
    # so we separate the cache restore and save steps in case running dialyzer fails.
    - name: Save PLT cache
      id: plt_cache_save
      uses: actions/cache/save@v3
      if: steps.plt_cache.outputs.cache-hit != 'true'
      with:
        key: |
          plt-${{ runner.os }}-${{ steps.elixir-install.outputs.otp-version }}-${{ steps.elixir-install.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
        path: |
          priv/plts
